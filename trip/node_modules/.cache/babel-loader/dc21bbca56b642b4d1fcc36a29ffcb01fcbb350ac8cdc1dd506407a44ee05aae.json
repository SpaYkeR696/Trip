{"ast":null,"code":";\nconst apiUrl = 'http://localhost:3000/trip';\nexport const TripApi = {\n  getTrips: async () => {\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error('Filed to fetch drivers');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return [];\n    }\n  },\n  addDriver: async newDriver => {\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'aplication/json'\n        },\n        body: JSON.stringify(newDriver)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add a new driver');\n      }\n    } catch (error) {\n      error;\n    }\n  }\n};","map":{"version":3,"names":["apiUrl","TripApi","getTrips","response","fetch","ok","Error","data","json","error","addDriver","newDriver","method","headers","body","JSON","stringify"],"sources":["/home/spayker/hexlet/trip/src/components/api/TripApi.tsx"],"sourcesContent":["interface Driver {\n    firstName: string;\n    lastName: string;\n    phoneNumber: string;\n    route: string;\n};\n\nconst apiUrl = 'http://localhost:3000/trip';\n\nexport const TripApi = {\n    getTrips: async (): Promise<Driver[]> => {\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error ('Filed to fetch drivers');\n            }\n\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            return [];\n        }\n    },\n\n    addDriver: async (newDriver: Driver): Promise<void> => {\n        try {\n            const response = await fetch(apiUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'aplication/json',\n                },\n                body: JSON.stringify(newDriver),\n            });\n            if (!response.ok) {\n                throw new Error('Failed to add a new driver');\n            }\n        } catch (error) {\n            error;\n        }\n    },\n};\n\n"],"mappings":"AAKC;AAED,MAAMA,MAAM,GAAG,4BAA4B;AAE3C,OAAO,MAAMC,OAAO,GAAG;EACnBC,QAAQ,EAAE,MAAAA,CAAA,KAA+B;IACrC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAAC;MACpC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,wBAAwB,CAAC;MAC9C;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACf,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZ,OAAO,EAAE;IACb;EACJ,CAAC;EAEDC,SAAS,EAAE,MAAOC,SAAiB,IAAoB;IACnD,IAAI;MACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,EAAE;QACjCY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,SAAS;MAClC,CAAC,CAAC;MACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MACjD;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZA,KAAK;IACT;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}